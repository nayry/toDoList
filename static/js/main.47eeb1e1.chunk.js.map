{"version":3,"sources":["Items.js","List.js","App.js","serviceWorker.js","index.js"],"names":["Items","items","updateItem","deleteItem","checkBox","listItems","map","item","className","key","id","type","value","onChange","event","target","checked","onClick","List","props","updateCurrentItem","bind","addItem","getData","setData","state","currentItem","this","localItems","JSON","parse","localStorage","getItem","setState","setItem","stringify","Date","now","newList","filter","name","updateName","placeholder","deleteList","React","Component","App","updateList","addList","currentList","lists","length","removeItem","localLists","list","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.47eeb1e1.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Items.css'\r\n\r\n\r\nconst Items = ({items, updateItem, deleteItem, checkBox}) => {\r\n  const listItems = items.map((item) => {\r\n    return (<div className=\"item\" key={item.id}>\r\n      <input className=\"itemText\" type=\"text\" value={item.value} id={item.id} onChange={(event) => {\r\n        updateItem(event.target.value, item.id);}}/>\r\n        {item.checked ?\r\n          <input type=\"checkbox\" onChange={(event) => {\r\n            checkBox(item.id);}} checked/>\r\n        :\r\n          <input type=\"checkbox\" onChange={(event) => {\r\n            checkBox(item.id);}}/>\r\n        }\r\n      <span className=\"glyphicon glyphicon-trash\" id=\"item\" onClick={(event) => {\r\n        deleteItem(item.id);}}></span>\r\n    </div>)\r\n  })\r\n\r\n  return(\r\n    <div>\r\n      {listItems}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Items;\r\n","import React from 'react';\r\nimport './List.css'\r\nimport Items from './Items'\r\n\r\nclass List extends React.Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.updateCurrentItem = this.updateCurrentItem.bind(this);\r\n    this.addItem = this.addItem.bind(this);\r\n    this.updateItem = this.updateItem.bind(this);\r\n    this.deleteItem = this.deleteItem.bind(this);\r\n    this.getData = this.getData.bind(this);\r\n    this.setData = this.setData.bind(this);\r\n    this.checkBox = this.checkBox.bind(this);\r\n    this.state = {\r\n      id: this.props.id,\r\n      items: [],\r\n      currentItem:{\r\n        checked: false,\r\n        value:'',\r\n        id:''\r\n      }\r\n    }\r\n  }\r\n\r\n  componentDidMount(){\r\n    this.getData();\r\n  }\r\n\r\n  componentDidUpdate(){\r\n    this.setData();\r\n  }\r\n\r\n  //get data from localStorage\r\n  getData(){\r\n    const localItems = JSON.parse(localStorage.getItem(this.state.id));\r\n    if(localItems){\r\n      this.setState({\r\n        items: localItems\r\n      })\r\n    }\r\n  }\r\n\r\n  //set data to localStorage\r\n  setData(){\r\n    localStorage.setItem(this.state.id, JSON.stringify(this.state.items));\r\n  }\r\n\r\n  //update the current value inside the input field\r\n  updateCurrentItem(event){\r\n    this.setState({\r\n        currentItem:{\r\n          checked: false,\r\n          value: event.target.value,\r\n          id: Date.now()\r\n        }\r\n    })\r\n  }\r\n\r\n  //add a new item\r\n  addItem(){\r\n    if(this.state.currentItem.value !== ''){\r\n      const items = [...this.state.items, this.state.currentItem];\r\n      this.setState({\r\n        items: items,\r\n        currentItem: {\r\n          checked: false,\r\n          value: '',\r\n          id: ''\r\n        }\r\n      })\r\n    }\r\n  }\r\n\r\n  //update an existing item\r\n  updateItem(value, id){\r\n    const items = this.state.items;\r\n    items.map(item=>{\r\n      if(item.id===id){\r\n        item.value = value;\r\n      }\r\n      return 0;\r\n    })\r\n    this.setState({\r\n      items: items\r\n    })\r\n  }\r\n\r\n  //delete an existing item\r\n  deleteItem(key){\r\n    const newList = this.state.items.filter(item => item.id!==key);\r\n    this.setState({\r\n      items: newList\r\n    })\r\n  }\r\n\r\n  //check the item as complete or incomplete\r\n  checkBox(id){\r\n    const items = this.state.items;\r\n    items.map(item=>{\r\n      if(item.id===id){\r\n        item.checked = !item.checked;\r\n      }\r\n      return 0;\r\n    })\r\n    this.setState({\r\n      items: items\r\n    })\r\n  }\r\n\r\n  render(){\r\n    return (\r\n      <div className=\"list\">\r\n      <h1><input value={this.props.name} className=\"name\" onChange={(event)=>{this.props.updateName(\r\n        event.target.value, this.state.id\r\n      )}}/></h1>\r\n      <div id=\"addItem\">\r\n      <input className=\"content\" type=\"text\" placeholder=\"Enter Item Name\" value={this.state.currentItem.value} onChange={this.updateCurrentItem}/>\r\n      <button onClick={this.addItem} className=\"addItem\">Add</button>\r\n      </div>\r\n      <Items items={this.state.items} updateItem={this.updateItem} deleteItem={this.deleteItem} checkBox={this.checkBox}/>\r\n      <span className=\"glyphicon glyphicon-trash\" id=\"deleteList\" onClick={(event) => {\r\n        this.props.deleteList(this.state.id)}}></span>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default List;\r\n","import React from 'react';\nimport './App.css';\nimport List from './List';\n\n\nclass App extends React.Component {\n  constructor(props){\n    super(props);\n    this.updateName = this.updateName.bind(this);\n    this.updateList = this.updateList.bind(this);\n    this.addList = this.addList.bind(this);\n    this.deleteList = this.deleteList.bind(this);\n    this.getData = this.getData.bind(this);\n    this.setData = this.setData.bind(this);\n    this.state = {\n      currentList: {\n        id: '',\n        name: ''\n      },\n      lists: []\n    }\n  }\n\n  componentDidMount(){\n    this.getData();\n  }\n\n  componentDidUpdate(){\n    this.setData();\n    if(this.state.lists.length === 0){\n      localStorage.removeItem('localLists');\n    }\n  }\n\n  //get data from localStorage\n  getData(){\n    const localLists = JSON.parse(localStorage.getItem('localLists'));\n    if(localLists){\n      this.setState({\n        lists: localLists\n      })\n    }\n  }\n\n  //set data to localStorage\n  setData(){\n    localStorage.setItem('localLists', JSON.stringify(this.state.lists));\n  }\n\n  //update the current value inside the input field\n  updateList(event){\n    this.setState({\n      currentList:{\n        id: Date.now(),\n        name: event.target.value\n      }\n    })\n  }\n\n  //add a new list\n  addList(){\n    if(this.state.currentList.name !== ''){\n      const lists = [...this.state.lists, this.state.currentList];\n      this.setState({\n        lists: lists,\n        currentList: {\n          id: '',\n          name: ''\n        }\n      })\n    }\n  }\n\n  //update the name of an existing list\n  updateName(value, id){\n    const lists = this.state.lists;\n    lists.map(list =>{\n      if(list.id === id){\n        list.name = value;\n      }\n      return 0;\n    })\n    this.setState({\n      lists: lists\n    })\n  }\n\n  //delete and existing list\n  deleteList(id){\n    const newList = this.state.lists.filter(list => list.id !== id);\n    this.setState({\n      lists: newList\n    })\n    localStorage.removeItem(id);\n  }\n\n  render(){\n    return (\n      <div className=\"App\">\n       <div className=\"addList\">\n      <input type=\"text\" placeholder=\"Enter List Name\" value={this.state.currentList.name} onChange={this.updateList}/>\n      <button onClick={this.addList}><span className=\"glyphicon glyphicon-plus\"></span></button>\n      </div>\n      <div className=\"lists\">\n      {\n        this.state.lists.map((list)=>{\n          return(\n              <List name={list.name} id={list.id} key={list.id} updateName={this.updateName} deleteList={this.deleteList}/>\n          )\n        })\n      }\n      </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}